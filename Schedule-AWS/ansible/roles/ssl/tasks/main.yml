---
- name: install cert-manager
  shell: |
    kubectl create namespace argocd
    kubectl create namespace cert-manager
    kubectl create secret generic route53-credentials-secret \
    --from-literal=aws_access_key_id={{ aws_access_key_id }} \
    --from-literal=aws_secret_access_key={{ aws_secret_access_key }} \
    -n cert-manager
    kubectl apply -f https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.yaml
  environment:
    KUBECONFIG: "/home/{{ user }}/.kube/config"
  args:
    executable: /bin/bash

- name: Copy clusterissuer.yaml from template
  template:
    src: clusterissuer.yaml.j2
    dest: /home/{{ user }}/clusterissuer.yaml
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: "0644"

- name: Copy certificate.yaml from template
  template:
    src: certificate.yaml.j2
    dest: /home/{{ user }}/certificate.yaml
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: "0644"

- name: Copy certificate-argo.yaml from template
  template:
    src: certificate-argo.yaml.j2
    dest: /home/{{ user }}/certificate-argo.yaml
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: "0644"

- name: create certificate
  shell: |
    kubectl apply -f /home/{{ user }}/clusterissuer.yaml
    kubectl apply -f /home/{{ user }}/certificate.yaml
    kubectl apply -f /home/{{ user }}/certificate-argo.yaml
  environment:
    KUBECONFIG: "/home/{{ user }}/.kube/config"
  args:
    executable: /bin/bash
