pipeline {
    agent any

    parameters {
            booleanParam(name: 'AUTO_RUN_CD', defaultValue: false)
        }

    tools {
        jdk 'jdk11'
        gradle 'gradle-6.9.4'
    }

    stages {
        stage('Checkout from GitHub') {
            steps {
                git branch: 'main',
			    url: 'https://github.com/NightPhoenixSC2/jenkins-backend.git',
		    	credentialsId: 'git'
            }
        }

        stage('Build Backend') {
            steps {
                dir('backend-project') {
                    dir('backend') {
                        script {
                            sh 'gradle build -x test'
                        }
                    }
                }
            }
        }

        stage('Backend Tests') {
            steps {
                dir('backend-project/backend/') {
                    script {
                        sh 'gradle test'
                    }
                }
            }
        }

        stage('Backend Code Review') {
            environment {
                PROJECT_KEY = 'class-schedule-backend'
                BUILD_VERSION = '1.0'
                SONAR_TOKEN = credentials('SONAR_TOKEN')
                SONAR_URL = credentials('SONAR_URL')
            }
            steps {
                dir('backend-project/backend/') {
                    script {
                        sh 'sed -i -e "s|PROJECT_KEY|${PROJECT_KEY}|g" \
                            -e "s|BUILD_VERSION|${BUILD_VERSION}|g" \
                            -e "s|SONAR_TOKEN|${SONAR_TOKEN}|g" \
                            -e "s|SONAR_URL|${SONAR_URL}|g" "sonar-project.properties"'
                        sh 'sonar-scanner'
                    }
                }
            }
        }

        stage('Build Backend Docker Image') {
            steps {
                dir('backend-project') {
                    script {
                        sh 'unzip -o backend/build/libs/class_schedule.war -d ./ROOT/'
                        sh 'docker build -t backend-test:latest .'
                    }
                }
            }
        }
        stage('Move Docker Images to ECR') {
            environment {
                AWS_REGION = 'us-east-1'
                ECR_REPO_BACKEND = 'backend-docker'
                ECR_ACCOUNT =credentials('AWS_ACCOUNT_ID')
                ECR_REGISTRY = "${ECR_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com"
            }
            steps {
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')]) {
                        script {
                            sh 'aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY'
                            sh """
                                docker tag backend-test:latest $ECR_REGISTRY/$ECR_REPO_BACKEND:latest
                                docker push $ECR_REGISTRY/$ECR_REPO_BACKEND:latest
                            """
                        }
                    }
            }
        }
        stage('Run CD') {
            steps {
                build job: "backend-CD", wait: false,
                parameters: [booleanParam(name: 'AUTO_RUN_CD', value: params.AUTO_RUN_CD)]
            }
        }
    }
}
