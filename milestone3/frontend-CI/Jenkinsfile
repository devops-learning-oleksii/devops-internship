pipeline {
    agent any

    parameters {
            booleanParam(name: 'AUTO_RUN_CD', defaultValue: false)
        }

    tools {
        jdk 'jdk11'
        gradle 'gradle-6.9.4'
    }

    stages {
        stage('Checkout from GitHub') {
            steps {
                git branch: 'main',
			    url: 'https://github.com/NightPhoenixSC2/jenkins-test.git',
		    	credentialsId: 'git'
            }
        }

        stage('Build Frontend') {
            tools {
                nodejs 'Node14'
            }
            environment {
                REACT_APP_API_BASE_URL = 'DOMAIN_TOKEN'
            }
            steps {
                dir('frontend-project') {
                    dir ('frontend') {
                        script {
                            sh 'npm install'
                            sh 'npm run build'
                        }
                    }
                }
            }
        }

        stage('Frontend Code Review') {
            environment {
                PROJECT_KEY = 'class-schedule-frontend'
                BUILD_VERSION = '1.0'
                SONAR_TOKEN = credentials('SONAR_TOKEN')
                SONAR_URL = credentials('SONAR_URL')
            }
            steps {
                dir('frontend-project/frontend/') {
                    script {
                        sh 'sed -i -e "s|PROJECT_KEY|${PROJECT_KEY}|g" \
                            -e "s|BUILD_VERSION|${BUILD_VERSION}|g" \
                            -e "s|SONAR_TOKEN|${SONAR_TOKEN}|g" \
                            -e "s|SONAR_URL|${SONAR_URL}|g" "sonar-project.properties"'
                        sh 'sonar-scanner'
                    }
                }
            }
        }

        stage('Build Frontend Docker Image') {
            steps {
                dir('frontend-project') {
                    script {
                        sh 'cp -r frontend/build ./build'
                        sh 'docker build -t frontend-test:latest .'
                    }
                }
            }
        }
        
        stage('Move Docker Images to ECR') {
            environment {
                AWS_REGION = 'us-east-1'
                ECR_REPO_FRONTEND = 'frontend-docker'
                ECR_ACCOUNT =credentials('AWS_ACCOUNT_ID')
                ECR_REGISTRY = "${ECR_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com"
            }
            steps {
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')]) {
                    script {
                        sh 'aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY'
                        sh """
                            docker tag frontend-test:latest $ECR_REGISTRY/$ECR_REPO_FRONTEND:latest
                            docker push $ECR_REGISTRY/$ECR_REPO_FRONTEND:latest
                        """
                    }
                }
            }
        }
        stage('Run CD') {
            steps {
                build job: "frontend-CD", wait: false,
                parameters: [booleanParam(name: 'AUTO_RUN_CD', value: params.AUTO_RUN_CD)]
            }
        }
    }
}
